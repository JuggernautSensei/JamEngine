#include "shaderCommon.hlsl"

#ifndef SSAO_KERNEL_SAMPLE
#define SSAO_KERNEL_SAMPLE 64
#endif

////////////////////////////////////////////////////

#if SSAO_KERNEL_SAMPLE == 16

const static int g_ssaoKernelCount = 16;
const static float3 g_ssaoKernel[g_ssaoKernelCount] = {
float3(0.048494, -0.082583, 0.028779),
float3(0.019152, -0.091725, 0.043992),
float3(-0.016948, 0.106229, 0.037927),
float3(-0.083762, -0.070932, 0.072676),
float3(0.054725, 0.138620, 0.046945),
float3(-0.064220, 0.125206, 0.124508),
float3(-0.050651, 0.215238, 0.049373),
float3(-0.261146, 0.071100, 0.029601),
float3(-0.258570, -0.035518, 0.193663),
float3(-0.348180, 0.119679, 0.111768),
float3(-0.248212, 0.235381, 0.294781),
float3(-0.377058, 0.019891, 0.365331),
float3(0.340224, -0.460842, 0.198524),
float3(0.055491, 0.048391, 0.690225),
float3(0.397287, 0.554418, 0.396741),
float3(0.108667, 0.882851, 0.051715),
};

#elif SSAO_KERNEL_SAMPLE == 32

const static int g_ssaoKernelCount = 32;
const static float3 g_ssaoKernel[g_ssaoKernelCount] = {
float3(-0.065904, 0.066489, 0.035155),
float3(-0.063661, 0.023458, 0.074656),
float3(-0.058282, 0.059766, 0.061210),
float3(-0.000677, 0.093804, 0.053338),
float3(0.049180, 0.095908, 0.037326),
float3(0.093121, -0.078771, 0.000932),
float3(0.094818, -0.018624, 0.089398),
float3(-0.010269, 0.118685, 0.079223),
float3(-0.034707, -0.111914, 0.103367),
float3(0.110544, -0.035619, 0.125769),
float3(0.148545, -0.006103, 0.114892),
float3(0.159666, -0.031057, 0.126971),
float3(0.139229, 0.112194, 0.139135),
float3(0.071789, -0.016290, 0.237383),
float3(0.097239, 0.225516, 0.117541),
float3(-0.179611, 0.174129, 0.161482),
float3(-0.304393, 0.099825, 0.054816),
float3(-0.105601, -0.239744, 0.238096),
float3(0.123692, 0.129863, 0.340412),
float3(-0.241345, 0.119510, 0.318742),
float3(0.144560, -0.038598, 0.426053),
float3(0.222969, -0.421144, 0.103315),
float3(0.026371, -0.381100, 0.360697),
float3(-0.070936, -0.385943, 0.406417),
float3(-0.544153, 0.104229, 0.246115),
float3(0.180288, 0.248027, 0.572356),
float3(-0.365155, -0.464822, 0.363915),
float3(0.631739, -0.291145, 0.254580),
float3(-0.497094, -0.610401, 0.054103),
float3(-0.285243, -0.053962, 0.787346),
float3(0.498298, 0.501606, 0.542217),
float3(0.637114, -0.615948, 0.327137),
};

#elif SSAO_KERNEL_SAMPLE == 64

const static int g_ssaoKernelCount = 64;
const static float3 g_ssaoKernel[g_ssaoKernelCount] =
{
    float3(-0.005321, 0.052987, 0.084641),
float3(0.028904, -0.036563, 0.088722),
float3(-0.000427, 0.098063, 0.023666),
float3(0.029498, -0.069705, 0.068341),
float3(0.064657, -0.052590, 0.061394),
float3(-0.050255, -0.047313, 0.079780),
float3(-0.067107, 0.047145, 0.070132),
float3(0.075893, 0.078531, 0.018503),
float3(-0.065870, -0.069160, 0.062356),
float3(0.018498, -0.063539, 0.097452),
float3(0.091551, 0.005668, 0.080397),
float3(0.034244, -0.105072, 0.061737),
float3(-0.084261, -0.100513, 0.011241),
float3(-0.081144, -0.030490, 0.106262),
float3(-0.025392, 0.016885, 0.139779),
float3(-0.064489, 0.095919, 0.094723),
float3(-0.069457, 0.124918, 0.063129),
float3(-0.109629, -0.094731, 0.075763),
float3(0.077639, -0.107629, 0.108141),
float3(-0.051774, -0.153721, 0.076455),
float3(-0.036962, 0.167203, 0.077330),
float3(-0.053560, 0.165097, 0.092971),
float3(-0.142912, -0.082118, 0.124145),
float3(0.130615, 0.041531, 0.167251),
float3(0.170298, 0.139531, 0.053483),
float3(-0.233317, 0.026943, 0.034096),
float3(0.040982, 0.047694, 0.240448),
float3(0.156450, 0.207540, 0.012024),
float3(0.203097, 0.137775, 0.117890),
float3(0.215067, 0.186540, 0.007349),
float3(-0.107980, -0.177029, 0.213678),
float3(0.263332, -0.034093, 0.162213),
float3(-0.074511, 0.204829, 0.241077),
float3(-0.338093, -0.013530, 0.024953),
float3(0.255345, -0.231735, 0.080104),
float3(0.191281, 0.241562, 0.203328),
float3(-0.171944, -0.311605, 0.146228),
float3(-0.205637, -0.173730, 0.296945),
float3(-0.236812, -0.226495, 0.258354),
float3(-0.255661, 0.341429, 0.081223),
float3(0.223479, 0.233051, 0.315678),
float3(-0.309838, -0.036972, 0.350617),
float3(0.376324, -0.236701, 0.200261),
float3(-0.363112, -0.113511, 0.334033),
float3(-0.089126, 0.400798, 0.327801),
float3(-0.075245, -0.114969, 0.527339),
float3(-0.003170, -0.375360, 0.422201),
float3(-0.351636, -0.099619, 0.457267),
float3(0.008275, -0.378294, 0.473671),
float3(-0.365133, 0.422814, 0.285906),
float3(-0.601051, 0.003886, 0.245631),
float3(0.292216, 0.140172, 0.588120),
float3(0.552796, 0.405747, 0.107781),
float3(0.460300, 0.243894, 0.492983),
float3(0.557934, -0.388790, 0.293636),
float3(-0.755387, 0.065223, 0.099301),
float3(-0.546995, -0.075513, 0.563661),
float3(0.562976, 0.280473, 0.516539),
float3(-0.569773, -0.566796, 0.241434),
float3(0.473503, -0.538057, 0.484031),
float3(-0.164574, 0.347317, 0.803863),
float3(-0.654319, -0.163785, 0.622121),
float3(-0.226873, -0.788974, 0.467303),
float3(0.903877, 0.143792, 0.327563),
};

#elif SSAO_KERNEL_SAMPLE == 128

const static int g_ssaoKernelCount = 128;
const static float3 g_ssaoKernel[g_ssaoKernelCount] = {
float3(0.054724, 0.058121, 0.060226),
float3(0.001194, -0.085140, 0.052542),
float3(0.067920, -0.069232, 0.025256),
float3(0.041870, -0.038156, 0.083007),
float3(-0.070219, -0.062379, 0.036808),
float3(0.066531, 0.017968, 0.074346),
float3(0.074195, 0.020189, 0.066984),
float3(0.019717, -0.081460, 0.059339),
float3(0.057609, 0.013803, 0.084889),
float3(-0.003029, -0.058327, 0.086594),
float3(-0.048436, 0.074071, 0.057414),
float3(-0.000150, -0.046904, 0.095779),
float3(0.037947, -0.061750, 0.079948),
float3(-0.074817, -0.021857, 0.076600),
float3(-0.022331, 0.043593, 0.099349),
float3(0.051458, 0.097782, 0.020380),
float3(-0.023464, 0.097302, 0.054699),
float3(0.000745, -0.087541, 0.075915),
float3(-0.078372, 0.072781, 0.049367),
float3(0.052545, -0.101072, 0.037186),
float3(0.029686, -0.037786, 0.112108),
float3(-0.049022, -0.106682, 0.040592),
float3(0.113210, -0.017207, 0.053960),
float3(-0.099284, 0.065780, 0.049717),
float3(-0.098561, -0.079005, 0.037056),
float3(-0.027287, -0.036944, 0.126237),
float3(-0.124213, 0.029298, 0.050184),
float3(-0.096908, 0.094289, 0.036485),
float3(-0.047167, -0.079041, 0.109525),
float3(0.135048, 0.048157, 0.028577),
float3(0.075235, -0.020839, 0.127425),
float3(0.080447, -0.066402, 0.111641),
float3(0.046626, -0.138656, 0.054905),
float3(0.009334, -0.072297, 0.142227),
float3(0.032377, -0.104398, 0.121595),
float3(0.144424, 0.084199, 0.006218),
float3(0.089432, -0.135336, 0.054704),
float3(0.156446, 0.064846, 0.044891),
float3(0.095668, 0.101499, 0.112702),
float3(-0.086291, -0.082356, 0.139508),
float3(0.072687, -0.129554, 0.115045),
float3(0.110925, 0.113664, 0.108493),
float3(-0.121245, -0.142474, 0.061403),
float3(0.122450, 0.048217, 0.152679),
float3(0.118006, 0.057764, 0.159114),
float3(0.153826, 0.085650, 0.116715),
float3(-0.132886, -0.087212, 0.146605),
float3(-0.136319, -0.113724, 0.132201),
float3(-0.180362, -0.038535, 0.131587),
float3(-0.196890, -0.095674, 0.076513),
float3(-0.147222, -0.039117, 0.181991),
float3(-0.145050, -0.187552, 0.052670),
float3(-0.164577, 0.158996, 0.096976),
float3(-0.018163, 0.247166, 0.056999),
float3(0.011283, 0.120710, 0.230208),
float3(0.175920, -0.113916, 0.164076),
float3(0.054604, -0.216792, 0.155397),
float3(-0.239625, -0.130264, 0.056200),
float3(0.163154, -0.019396, 0.232616),
float3(-0.244805, -0.072972, 0.139831),
float3(0.223111, 0.196909, 0.010293),
float3(0.168825, -0.029707, 0.251546),
float3(-0.043428, 0.240222, 0.192941),
float3(-0.233378, 0.170320, 0.132909),
float3(0.078724, 0.265540, 0.170047),
float3(-0.197491, -0.173366, 0.203034),
float3(0.165105, -0.290414, 0.059265),
float3(-0.220186, -0.044413, 0.263949),
float3(-0.228200, -0.041229, 0.267476),
float3(0.164809, -0.243897, 0.209894),
float3(-0.230663, 0.090377, 0.273696),
float3(0.076652, 0.249488, 0.271922),
float3(-0.063620, -0.312347, 0.215491),
float3(0.366827, 0.049669, 0.131182),
float3(-0.205775, -0.148318, 0.310328),
float3(-0.346376, -0.171646, 0.133547),
float3(0.344368, 0.151689, 0.180356),
float3(-0.034940, -0.277749, 0.320696),
float3(0.316387, -0.233300, 0.184401),
float3(-0.383741, 0.220809, 0.009125),
float3(0.083584, -0.362919, 0.255367),
float3(-0.018363, 0.434643, 0.150740),
float3(0.067864, 0.209766, 0.414357),
float3(0.337550, 0.138183, 0.309604),
float3(-0.180908, 0.415862, 0.179115),
float3(-0.273404, -0.410865, 0.057714),
float3(0.282269, -0.186773, 0.376502),
float3(-0.460554, 0.076909, 0.219092),
float3(0.018280, -0.416457, 0.319789),
float3(-0.373839, -0.382524, 0.016337),
float3(0.262564, -0.215643, 0.426058),
float3(-0.180190, -0.466961, 0.239542),
float3(-0.412259, -0.207889, 0.325551),
float3(0.462015, -0.340455, 0.037107),
float3(-0.207495, 0.145973, 0.527544),
float3(-0.027309, -0.491466, 0.335624),
float3(-0.387786, -0.465913, 0.009253),
float3(-0.014907, 0.471069, 0.397968),
float3(0.583477, -0.221734, 0.064995),
float3(-0.503399, 0.000400, 0.392587),
float3(0.536293, 0.238487, 0.277715),
float3(-0.194391, 0.262344, 0.573986),
float3(0.440293, -0.461574, 0.209798),
float3(0.444771, 0.507158, 0.105567),
float3(-0.595248, -0.329163, 0.138427),
float3(-0.174032, 0.433240, 0.529072),
float3(-0.108720, 0.586246, 0.398608),
float3(-0.649403, -0.268102, 0.194193),
float3(-0.006630, 0.051549, 0.738897),
float3(0.589900, 0.145689, 0.444144),
float3(0.372434, 0.308122, 0.592518),
float3(0.641041, 0.313715, 0.306738),
float3(-0.060706, 0.628251, 0.473534),
float3(-0.380777, -0.457410, 0.536714),
float3(-0.632514, 0.340726, 0.382428),
float3(0.712309, 0.356173, 0.220932),
float3(0.713441, 0.428954, 0.105784),
float3(-0.611011, -0.500059, 0.320064),
float3(0.071835, 0.679384, 0.530353),
float3(-0.593493, 0.556100, 0.330459),
float3(-0.853288, 0.251039, 0.052804),
float3(0.590789, -0.307944, 0.611403),
float3(-0.667080, 0.455511, 0.435325),
float3(-0.488564, 0.584620, 0.535163),
float3(-0.140251, -0.686645, 0.633381),
float3(-0.637549, 0.197959, 0.687529),
float3(0.084757, 0.295716, 0.922137),
float3(0.501597, 0.637889, 0.560071),
};

#endif

float PSmain(SCREENSPACE_EFFECT_PS_INPUT input) : SV_TARGET
{
    // get world normal
    float3 normal = gBufferNormalTexture.Sample(samplerPointWrap, input.texCoord).xyz;

    // get world pos
    float3 posNDC;
    posNDC.x = input.texCoord.x * 2.f - 1.f;
    posNDC.y = -(input.texCoord.y * 2.f - 1.f);
    posNDC.z = depthTexture.Sample(samplerPointWrap, input.texCoord).r;

    float3 posWorld = UnProjectionNDCPos(posNDC, cb_cameraViewProjInvMat);

    uint screenWidth, screenHeight, dummy;
    gBufferNormalTexture.GetDimensions(0, screenWidth, screenHeight, dummy);

    uint width, height, dummy2;
    ssaoNoiseTexture.GetDimensions(0, width, height, dummy2);

    // noise sampling 
    float2 noiseScale;
    noiseScale.x = screenWidth / width;
    noiseScale.y = screenHeight / height;
    float3 randomVec = ssaoNoiseTexture.Sample(samplerPointWrap, input.texCoord * noiseScale).xyz;

    // TBN (for ssao kernel transform)
    float3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    float3 bitangent = cross(normal, tangent);
    float3x3 TBN = float3x3(tangent, bitangent, normal);

    JAM_MATRIX viewProj = mul(cb_cameraViewMat, cb_cameraProjMat);

    float occlusion = 0;

    // depth
    float myDepthView = ConvertDepthInNDCToDepthInView(posNDC.z, cb_cameraProjMat);

    // sample kernel
    for (int i = 0; i < g_ssaoKernelCount; i++)
    {
        // sample ssao kernel
        float3 samplePos = g_ssaoKernel[i];
        samplePos = mul(samplePos, TBN); // to world space
        float3 samplePosWorld = posWorld + samplePos * cb_ssaoRadius; // offset in world
  
        float4 samplePosNDC = mul(float4(samplePosWorld, 1.0f), viewProj); // offset in clip space
        samplePosNDC /= samplePosNDC.w; // perspective divide (NDC space)
  
        // to texture space
        float2 samplePosTex;
        samplePosTex.x = samplePosNDC.x * 0.5f + 0.5f;
        samplePosTex.y = -samplePosNDC.y * 0.5f + 0.5f;
  
        // get depth
        float sampleDepth = depthTexture.Sample(samplerPointWrap, samplePosTex).r;
  
        // occlusion
        // if sampleDepth < offsetNDC.z, occlusion += 1
        float sampleDepthView = ConvertDepthInNDCToDepthInView(sampleDepth, cb_cameraProjMat);
        float rangeCheck = smoothstep(0.0, 1.0, cb_ssaoRadius / abs(myDepthView - sampleDepthView));
        occlusion += ((sampleDepthView + cb_ssaoBias <= myDepthView) ? 1 : 0) * rangeCheck;
    }
  
    float output = 1.0 - occlusion / (float) g_ssaoKernelCount;
    return output;
}