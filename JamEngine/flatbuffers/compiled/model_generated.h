// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MODEL_JAM_FBS_H_
#define FLATBUFFERS_GENERATED_MODEL_JAM_FBS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 21,
             "Non-compatible flatbuffers version included");

namespace jam {
namespace fbs {

struct Vec2;

struct Vec3;

struct VertexAttribute;
struct VertexAttributeBuilder;

struct MeshGeometry;
struct MeshGeometryBuilder;

struct Material;
struct MaterialBuilder;

struct RawModelNode;
struct RawModelNodeBuilder;

struct RawModel;
struct RawModelBuilder;

enum eTopology : int8_t {
  eTopology_Undefined = 0,
  eTopology_PointList = 1,
  eTopology_LineList = 2,
  eTopology_LineStrip = 3,
  eTopology_TriangleList = 4,
  eTopology_TriangleStrip = 5,
  eTopology_MIN = eTopology_Undefined,
  eTopology_MAX = eTopology_TriangleStrip
};

inline const eTopology (&EnumValueseTopology())[6] {
  static const eTopology values[] = {
    eTopology_Undefined,
    eTopology_PointList,
    eTopology_LineList,
    eTopology_LineStrip,
    eTopology_TriangleList,
    eTopology_TriangleStrip
  };
  return values;
}

inline const char * const *EnumNameseTopology() {
  static const char * const names[7] = {
    "Undefined",
    "PointList",
    "LineList",
    "LineStrip",
    "TriangleList",
    "TriangleStrip",
    nullptr
  };
  return names;
}

inline const char *EnumNameeTopology(eTopology e) {
  if (::flatbuffers::IsOutRange(e, eTopology_Undefined, eTopology_TriangleStrip)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseTopology()[index];
}

enum eVertexType : int8_t {
  eVertexType_Vertex2 = 0,
  eVertexType_Vertex3 = 1,
  eVertexType_Vertex3PosOnly = 2,
  eVertexType_MIN = eVertexType_Vertex2,
  eVertexType_MAX = eVertexType_Vertex3PosOnly
};

inline const eVertexType (&EnumValueseVertexType())[3] {
  static const eVertexType values[] = {
    eVertexType_Vertex2,
    eVertexType_Vertex3,
    eVertexType_Vertex3PosOnly
  };
  return values;
}

inline const char * const *EnumNameseVertexType() {
  static const char * const names[4] = {
    "Vertex2",
    "Vertex3",
    "Vertex3PosOnly",
    nullptr
  };
  return names;
}

inline const char *EnumNameeVertexType(eVertexType e) {
  if (::flatbuffers::IsOutRange(e, eVertexType_Vertex2, eVertexType_Vertex3PosOnly)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNameseVertexType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2()
      : x_(0),
        y_(0) {
  }
  Vec2(float _x, float _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

struct VertexAttribute FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VertexAttributeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_COLOR = 6,
    VT_NORMAL = 8,
    VT_UV0 = 10,
    VT_UV1 = 12,
    VT_TANGENT = 14,
    VT_BITANGENT = 16
  };
  const jam::fbs::Vec3 *position() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_POSITION);
  }
  const jam::fbs::Vec3 *color() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_COLOR);
  }
  const jam::fbs::Vec3 *normal() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_NORMAL);
  }
  const jam::fbs::Vec2 *uv0() const {
    return GetStruct<const jam::fbs::Vec2 *>(VT_UV0);
  }
  const jam::fbs::Vec2 *uv1() const {
    return GetStruct<const jam::fbs::Vec2 *>(VT_UV1);
  }
  const jam::fbs::Vec3 *tangent() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_TANGENT);
  }
  const jam::fbs::Vec3 *bitangent() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_BITANGENT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_POSITION, 4) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_COLOR, 4) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_NORMAL, 4) &&
           VerifyField<jam::fbs::Vec2>(verifier, VT_UV0, 4) &&
           VerifyField<jam::fbs::Vec2>(verifier, VT_UV1, 4) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_TANGENT, 4) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_BITANGENT, 4) &&
           verifier.EndTable();
  }
};

struct VertexAttributeBuilder {
  typedef VertexAttribute Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_position(const jam::fbs::Vec3 *position) {
    fbb_.AddStruct(VertexAttribute::VT_POSITION, position);
  }
  void add_color(const jam::fbs::Vec3 *color) {
    fbb_.AddStruct(VertexAttribute::VT_COLOR, color);
  }
  void add_normal(const jam::fbs::Vec3 *normal) {
    fbb_.AddStruct(VertexAttribute::VT_NORMAL, normal);
  }
  void add_uv0(const jam::fbs::Vec2 *uv0) {
    fbb_.AddStruct(VertexAttribute::VT_UV0, uv0);
  }
  void add_uv1(const jam::fbs::Vec2 *uv1) {
    fbb_.AddStruct(VertexAttribute::VT_UV1, uv1);
  }
  void add_tangent(const jam::fbs::Vec3 *tangent) {
    fbb_.AddStruct(VertexAttribute::VT_TANGENT, tangent);
  }
  void add_bitangent(const jam::fbs::Vec3 *bitangent) {
    fbb_.AddStruct(VertexAttribute::VT_BITANGENT, bitangent);
  }
  explicit VertexAttributeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VertexAttribute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VertexAttribute>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<VertexAttribute> CreateVertexAttribute(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const jam::fbs::Vec3 *position = nullptr,
    const jam::fbs::Vec3 *color = nullptr,
    const jam::fbs::Vec3 *normal = nullptr,
    const jam::fbs::Vec2 *uv0 = nullptr,
    const jam::fbs::Vec2 *uv1 = nullptr,
    const jam::fbs::Vec3 *tangent = nullptr,
    const jam::fbs::Vec3 *bitangent = nullptr) {
  VertexAttributeBuilder builder_(_fbb);
  builder_.add_bitangent(bitangent);
  builder_.add_tangent(tangent);
  builder_.add_uv1(uv1);
  builder_.add_uv0(uv0);
  builder_.add_normal(normal);
  builder_.add_color(color);
  builder_.add_position(position);
  return builder_.Finish();
}

struct MeshGeometry FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshGeometryBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_INDICES = 6
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<jam::fbs::VertexAttribute>> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<jam::fbs::VertexAttribute>> *>(VT_VERTICES);
  }
  const ::flatbuffers::Vector<uint32_t> *indices() const {
    return GetPointer<const ::flatbuffers::Vector<uint32_t> *>(VT_INDICES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           verifier.VerifyVectorOfTables(vertices()) &&
           VerifyOffset(verifier, VT_INDICES) &&
           verifier.VerifyVector(indices()) &&
           verifier.EndTable();
  }
};

struct MeshGeometryBuilder {
  typedef MeshGeometry Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<jam::fbs::VertexAttribute>>> vertices) {
    fbb_.AddOffset(MeshGeometry::VT_VERTICES, vertices);
  }
  void add_indices(::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices) {
    fbb_.AddOffset(MeshGeometry::VT_INDICES, indices);
  }
  explicit MeshGeometryBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MeshGeometry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MeshGeometry>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MeshGeometry> CreateMeshGeometry(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<jam::fbs::VertexAttribute>>> vertices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint32_t>> indices = 0) {
  MeshGeometryBuilder builder_(_fbb);
  builder_.add_indices(indices);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MeshGeometry> CreateMeshGeometryDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<jam::fbs::VertexAttribute>> *vertices = nullptr,
    const std::vector<uint32_t> *indices = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVector<::flatbuffers::Offset<jam::fbs::VertexAttribute>>(*vertices) : 0;
  auto indices__ = indices ? _fbb.CreateVector<uint32_t>(*indices) : 0;
  return jam::fbs::CreateMeshGeometry(
      _fbb,
      vertices__,
      indices__);
}

struct Material FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MaterialBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AMBIENT_COLOR = 4,
    VT_DIFFUSE_COLOR = 6,
    VT_SPECULAR_COLOR = 8,
    VT_SHININESS = 10,
    VT_ALBEDO_COLOR = 12,
    VT_METALLIC = 14,
    VT_ROUGHNESS = 16,
    VT_AO = 18,
    VT_EMISSIVE = 20,
    VT_EMISSIVE_COLOR = 22,
    VT_EMISSIVE_SCALE = 24,
    VT_DISPLACEMENT_SCALE = 26
  };
  const jam::fbs::Vec3 *ambient_color() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_AMBIENT_COLOR);
  }
  const jam::fbs::Vec3 *diffuse_color() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_DIFFUSE_COLOR);
  }
  const jam::fbs::Vec3 *specular_color() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_SPECULAR_COLOR);
  }
  float shininess() const {
    return GetField<float>(VT_SHININESS, 32.0f);
  }
  const jam::fbs::Vec3 *albedo_color() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_ALBEDO_COLOR);
  }
  float metallic() const {
    return GetField<float>(VT_METALLIC, 0.0f);
  }
  float roughness() const {
    return GetField<float>(VT_ROUGHNESS, 1.0f);
  }
  float ao() const {
    return GetField<float>(VT_AO, 1.0f);
  }
  float emissive() const {
    return GetField<float>(VT_EMISSIVE, 0.0f);
  }
  const jam::fbs::Vec3 *emissive_color() const {
    return GetStruct<const jam::fbs::Vec3 *>(VT_EMISSIVE_COLOR);
  }
  float emissive_scale() const {
    return GetField<float>(VT_EMISSIVE_SCALE, 1.0f);
  }
  float displacement_scale() const {
    return GetField<float>(VT_DISPLACEMENT_SCALE, 0.0f);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_AMBIENT_COLOR, 4) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_DIFFUSE_COLOR, 4) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_SPECULAR_COLOR, 4) &&
           VerifyField<float>(verifier, VT_SHININESS, 4) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_ALBEDO_COLOR, 4) &&
           VerifyField<float>(verifier, VT_METALLIC, 4) &&
           VerifyField<float>(verifier, VT_ROUGHNESS, 4) &&
           VerifyField<float>(verifier, VT_AO, 4) &&
           VerifyField<float>(verifier, VT_EMISSIVE, 4) &&
           VerifyField<jam::fbs::Vec3>(verifier, VT_EMISSIVE_COLOR, 4) &&
           VerifyField<float>(verifier, VT_EMISSIVE_SCALE, 4) &&
           VerifyField<float>(verifier, VT_DISPLACEMENT_SCALE, 4) &&
           verifier.EndTable();
  }
};

struct MaterialBuilder {
  typedef Material Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_ambient_color(const jam::fbs::Vec3 *ambient_color) {
    fbb_.AddStruct(Material::VT_AMBIENT_COLOR, ambient_color);
  }
  void add_diffuse_color(const jam::fbs::Vec3 *diffuse_color) {
    fbb_.AddStruct(Material::VT_DIFFUSE_COLOR, diffuse_color);
  }
  void add_specular_color(const jam::fbs::Vec3 *specular_color) {
    fbb_.AddStruct(Material::VT_SPECULAR_COLOR, specular_color);
  }
  void add_shininess(float shininess) {
    fbb_.AddElement<float>(Material::VT_SHININESS, shininess, 32.0f);
  }
  void add_albedo_color(const jam::fbs::Vec3 *albedo_color) {
    fbb_.AddStruct(Material::VT_ALBEDO_COLOR, albedo_color);
  }
  void add_metallic(float metallic) {
    fbb_.AddElement<float>(Material::VT_METALLIC, metallic, 0.0f);
  }
  void add_roughness(float roughness) {
    fbb_.AddElement<float>(Material::VT_ROUGHNESS, roughness, 1.0f);
  }
  void add_ao(float ao) {
    fbb_.AddElement<float>(Material::VT_AO, ao, 1.0f);
  }
  void add_emissive(float emissive) {
    fbb_.AddElement<float>(Material::VT_EMISSIVE, emissive, 0.0f);
  }
  void add_emissive_color(const jam::fbs::Vec3 *emissive_color) {
    fbb_.AddStruct(Material::VT_EMISSIVE_COLOR, emissive_color);
  }
  void add_emissive_scale(float emissive_scale) {
    fbb_.AddElement<float>(Material::VT_EMISSIVE_SCALE, emissive_scale, 1.0f);
  }
  void add_displacement_scale(float displacement_scale) {
    fbb_.AddElement<float>(Material::VT_DISPLACEMENT_SCALE, displacement_scale, 0.0f);
  }
  explicit MaterialBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Material> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Material>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Material> CreateMaterial(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const jam::fbs::Vec3 *ambient_color = nullptr,
    const jam::fbs::Vec3 *diffuse_color = nullptr,
    const jam::fbs::Vec3 *specular_color = nullptr,
    float shininess = 32.0f,
    const jam::fbs::Vec3 *albedo_color = nullptr,
    float metallic = 0.0f,
    float roughness = 1.0f,
    float ao = 1.0f,
    float emissive = 0.0f,
    const jam::fbs::Vec3 *emissive_color = nullptr,
    float emissive_scale = 1.0f,
    float displacement_scale = 0.0f) {
  MaterialBuilder builder_(_fbb);
  builder_.add_displacement_scale(displacement_scale);
  builder_.add_emissive_scale(emissive_scale);
  builder_.add_emissive_color(emissive_color);
  builder_.add_emissive(emissive);
  builder_.add_ao(ao);
  builder_.add_roughness(roughness);
  builder_.add_metallic(metallic);
  builder_.add_albedo_color(albedo_color);
  builder_.add_shininess(shininess);
  builder_.add_specular_color(specular_color);
  builder_.add_diffuse_color(diffuse_color);
  builder_.add_ambient_color(ambient_color);
  return builder_.Finish();
}

struct RawModelNode FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RawModelNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_MESH = 6,
    VT_MATERIAL = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  const jam::fbs::MeshGeometry *mesh() const {
    return GetPointer<const jam::fbs::MeshGeometry *>(VT_MESH);
  }
  const jam::fbs::Material *material() const {
    return GetPointer<const jam::fbs::Material *>(VT_MATERIAL);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_MESH) &&
           verifier.VerifyTable(mesh()) &&
           VerifyOffset(verifier, VT_MATERIAL) &&
           verifier.VerifyTable(material()) &&
           verifier.EndTable();
  }
};

struct RawModelNodeBuilder {
  typedef RawModelNode Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(RawModelNode::VT_NAME, name);
  }
  void add_mesh(::flatbuffers::Offset<jam::fbs::MeshGeometry> mesh) {
    fbb_.AddOffset(RawModelNode::VT_MESH, mesh);
  }
  void add_material(::flatbuffers::Offset<jam::fbs::Material> material) {
    fbb_.AddOffset(RawModelNode::VT_MATERIAL, material);
  }
  explicit RawModelNodeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RawModelNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RawModelNode>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RawModelNode> CreateRawModelNode(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<jam::fbs::MeshGeometry> mesh = 0,
    ::flatbuffers::Offset<jam::fbs::Material> material = 0) {
  RawModelNodeBuilder builder_(_fbb);
  builder_.add_material(material);
  builder_.add_mesh(mesh);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RawModelNode> CreateRawModelNodeDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    ::flatbuffers::Offset<jam::fbs::MeshGeometry> mesh = 0,
    ::flatbuffers::Offset<jam::fbs::Material> material = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return jam::fbs::CreateRawModelNode(
      _fbb,
      name__,
      mesh,
      material);
}

struct RawModel FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RawModelBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODES = 4,
    VT_TOPOLOGY = 6,
    VT_VERTEX_TYPE = 8
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<jam::fbs::RawModelNode>> *nodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<jam::fbs::RawModelNode>> *>(VT_NODES);
  }
  jam::fbs::eTopology topology() const {
    return static_cast<jam::fbs::eTopology>(GetField<int8_t>(VT_TOPOLOGY, 4));
  }
  jam::fbs::eVertexType vertex_type() const {
    return static_cast<jam::fbs::eVertexType>(GetField<int8_t>(VT_VERTEX_TYPE, 1));
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           VerifyField<int8_t>(verifier, VT_TOPOLOGY, 1) &&
           VerifyField<int8_t>(verifier, VT_VERTEX_TYPE, 1) &&
           verifier.EndTable();
  }
};

struct RawModelBuilder {
  typedef RawModel Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_nodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<jam::fbs::RawModelNode>>> nodes) {
    fbb_.AddOffset(RawModel::VT_NODES, nodes);
  }
  void add_topology(jam::fbs::eTopology topology) {
    fbb_.AddElement<int8_t>(RawModel::VT_TOPOLOGY, static_cast<int8_t>(topology), 4);
  }
  void add_vertex_type(jam::fbs::eVertexType vertex_type) {
    fbb_.AddElement<int8_t>(RawModel::VT_VERTEX_TYPE, static_cast<int8_t>(vertex_type), 1);
  }
  explicit RawModelBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RawModel> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RawModel>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RawModel> CreateRawModel(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<jam::fbs::RawModelNode>>> nodes = 0,
    jam::fbs::eTopology topology = jam::fbs::eTopology_TriangleList,
    jam::fbs::eVertexType vertex_type = jam::fbs::eVertexType_Vertex3) {
  RawModelBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  builder_.add_vertex_type(vertex_type);
  builder_.add_topology(topology);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RawModel> CreateRawModelDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<jam::fbs::RawModelNode>> *nodes = nullptr,
    jam::fbs::eTopology topology = jam::fbs::eTopology_TriangleList,
    jam::fbs::eVertexType vertex_type = jam::fbs::eVertexType_Vertex3) {
  auto nodes__ = nodes ? _fbb.CreateVector<::flatbuffers::Offset<jam::fbs::RawModelNode>>(*nodes) : 0;
  return jam::fbs::CreateRawModel(
      _fbb,
      nodes__,
      topology,
      vertex_type);
}

inline const jam::fbs::RawModel *GetRawModel(const void *buf) {
  return ::flatbuffers::GetRoot<jam::fbs::RawModel>(buf);
}

inline const jam::fbs::RawModel *GetSizePrefixedRawModel(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<jam::fbs::RawModel>(buf);
}

inline bool VerifyRawModelBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<jam::fbs::RawModel>(nullptr);
}

inline bool VerifySizePrefixedRawModelBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<jam::fbs::RawModel>(nullptr);
}

inline void FinishRawModelBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<jam::fbs::RawModel> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRawModelBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<jam::fbs::RawModel> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace fbs
}  // namespace jam

#endif  // FLATBUFFERS_GENERATED_MODEL_JAM_FBS_H_
